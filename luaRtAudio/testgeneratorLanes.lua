lanes = require"lanes"lanes.configure({ nb_keepers = 1, with_timers = true, on_state_create = nil,track_lanes=true})local linda = lanes.linda()require"lanesutils"rt = require"RtAudio"print(rt)print("VERSION",rt.getVersion())dac = rt.RtAudio() --rt.RtAudio_WINDOWS_DS)print("current api",dac:getCurrentApi())print("device count ",dac:getDeviceCount())function fun1()	local rt = require"RtAudio"	local om = 0	local freq = 200	function sines(nFrames)		local key,val = linda:receive(0,"freq")		freq = key and val or freq		local res = {}		local sin = math.sin		local hh = 2*math.pi*freq/44100		for i=1,nFrames do			om = om + hh			local val = sin(om)*sin(om*0.01)			table.insert(res,val)			table.insert(res,val)		end		return res	end	rt.setCallbackLanes("sines")	linda:send("done",1)	linda:receive("dummy")endlanegen(fun1)()linda:receive("done")busiz = dac:openStream({3,2},nil,44100,512)dac:startStream()print"tell freq"freq = io.read"*l"linda:send("freq",freq)io.read"*l"