rt = require"RtAudio"--choose apilocal compiledapis = rt.getCompiledApi()for k,v in pairs(compiledapis) do	print("API",k,v)endlocal kapiwhile true do	print"choose API"	kapi = tonumber(io.read"*l")	if compiledapis[kapi] then break endenddac = rt.RtAudio(rt[compiledapis[kapi]])--choose devicefor i=0,dac:getDeviceCount()-1 do	print("DEV",i,dac:getDeviceInfo(i).name)endlocal devwhile true do	print"choose DEV"	dev = tonumber(io.read"*l")	if dev and (dev < dac:getDeviceCount()) then break endend--generatorlocal function generator()	local om = 0	local sin = math.sin	return function(nFrames)		local res = {}		local hh = 2*math.pi*200/44100		for i=1,nFrames do			om = om + hh			local val = sin(om)*sin(om*0.01)			table.insert(res,val)			table.insert(res,val)		end		return res	endend--doitdac:setCallback(string.dump(generator))--dev = dac:getDefaultOutputDevice()bufsize = dac:openStream({dev,2},nil,44100,512)print("using device:",dac:getDeviceInfo(dev).name,"bufsize:",bufsize)dac:startStream()print"press return to exit"io.read"*l"dac:closeStream()